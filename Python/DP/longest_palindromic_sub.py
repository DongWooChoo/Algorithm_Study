def LPS(s) : #최장 회문 부분 수열
    n = len(s) # 문자열의 길이를 저장
    dp = [[0] * n for _ in range(n)] #2차원 배열(n * n) 생성
    for i in range(n): #문자열 길이 만큼 반복
        dp[i][i] = 1 #모든 글자의 회문 부분은 1(자기 자신)
    for cl in range(2, n + 1): # 부분수열의 길이를 2부터 n까지 증가시키면서 계산
        for i in range(n - cl + 1): #i는 부분 문자열의 시작 인덱스
            j = i + cl - 1 #j는 부분 문자열의 끝 인덱스
            if s[i] == s[j] and cl == 2: #s의 i번째 문자와 j번째 문자가 같고 부분 문자열의 길이가 2인 경우
                dp[i][j] = 2 #이 부분 문자열은 회문이며 길이는 2
            elif s[i] == s[j]:# s의 i번째 문자와 j번째 문자가 같은 경우
                dp[i][j] = dp[i + 1][j - 1] + 2 #이 두 문자를 포함하는 부분 문자열의 최장 회문 부분수열의 길이는 이 두 문자를 제외한 내부 부분 문자열의 최장 회문 부분수열 길이에 2를 더한 값
            else: #s의 i번째 문자와 j번째 문자가 다른 경우
                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) #i를 제외하거나 j를 제외한 부분 문자열 중 최장 회문 부분수열의 길이가 더 큰 값

    return dp[0][n - 1] #[0][n-1] 위치에는 문자열 s 전체에 대한 최장 회문 부분수열의 길이가 저장

print("최장 회문 부분 수열")
print(LPS('cholcolate'))
